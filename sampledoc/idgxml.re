= Re:VIEWとInDesign
//lead{
この章では、本書の始まりとして、Re:VIEWとInDesignを組み合わせることで何が実現されるのかを説明します。
//}

== Re:VIEWとは
Re:VIEW（りびゅー、@<href>{http://reviewml.org/}）は、強力かつ簡易なマークアップ記述言語およびドキュメント変換システムです。フリーソフトウェアであり、誰もが目的を問わず自由に利用できます。Re:VIEWのマークアップ記述言語の記法を使って装飾したテキストファイル――Re:VIEW原稿は、Re:VIEWのコマンドセットを使って、次のような各種の文書形式に変換することができます。

 * HTML、およびEPUB作成
 * LaTeX、およびLaTeX経由のPDF作成
 * プレインテキスト
 * Markdown
 * IDGXML（InDesign向けのXML）

Re:VIEWが特徴的なのは、HTMLやEPUBなどの電子媒体向けに限らず、当初から紙媒体の書籍を作ることにも焦点を当てている点にあります。

出版不況とはいわれますが、紙媒体の刊行物がすぐになくなるわけではありません。また、電子媒体についても、現時点のEPUBでは、紙媒体をほぼそのまま電子化したPDFほどの紙面レイアウトの自由を持つには至っていません。それに、制作コストが厳しさを増すなかでは、より安価かつスピーディーに紙媒体と電子媒体（PDF、EPUB）を作り上げる手法も求められます。

このような状況において、単一のRe:VIEW原稿からEPUBもPDFも作ることができるRe:VIEWは、現実的な解決策の1つといえます。
#@# Re:VIEWの開発は、マーケティングの営利追求に基づいてではなく、開発チームのメンバーの（たいていはそれぞれの書籍制作活動にとっての）需要によって駆動しています。

本書は紙面の都合でRe:VIEWの基礎について細かには説明しませんが、付録Aに記法の概略を掲載しています。より詳細な情報については、『技術書をかこう！ 〜はじめてのRe:VIEW』（TechBooster編、2005、TechBooster、@<href>{https://techbooster.booth.pm/items/178236}）などの入門書、あるいはRe:VIEWのドキュメントを参照してください。

== InDesignとは
InDesignは、Adobe社（@<href>{http://www.adobe.com/jp/}）が開発・販売している、プロフェッショナル向けのDTPソフトウェアです。現在世に流通している書籍のほとんどの紙面は、このInDesignを使って作られています。

DTP（Desktop Publishing）とは一般に、コンピュータ上で書籍やカタログなどの紙面のレイアウトおよび原稿・図版の配置を行い、印刷所に印刷（と製本）を依頼できる状態にしたデータを作成することです@<fn>{kumihan}。Re:VIEWを使った書籍制作でよく使われるTeX（LaTeX）も、一種のDTPソフトウェアといえます。「印刷所に印刷（と製本）を依頼できる状態にしたデータ」は、今ではほぼPDFです。

//footnote[kumihan][若干意味は異なるのですが、「組版」と呼ぶこともあります。]

InDesignはプロフェッショナル向けとはいえ、数百万円の代物というわけではなく、「Adobe Creative Cloud」という月額サブスクリプションベースの契約であれば月額4,000〜5,000円程度で利用権が得られ@<fn>{cc}、ごく一般的なWindowsあるいはOS X（macOS）のマシンにインストールして利用できます（@<img>{adobecc}）。

//footnote[cc][Adobe Creative Cloudは頻繁に値引きのキャンペーンを行っています。]

//image[adobecc][Adobe Creative Cloud（@<href>{http://www.adobe.com/jp/}）]{
//}

@<table>{latexvsindesign}に、大ざっぱながらLaTeXとInDesignの比較をまとめておきます。

//tsize[32,47]
//table[latexvsindesign][LaTeXとInDesignの違い]{
比較項目	LaTeX	InDesign
-----------------------------------
@<dtp>{table type=tg}動作OS	Unix/Linux、Windows、OS X	Windows、OS X
@<dtp>{table type=tg}紙面レイアウト	独特の記法でクラスファイルやスタイルファイルをプログラミング	WYSIWYGによるレイアウト
@<dtp>{table type=tg}原稿からPDFへの手順	バッチ実行（全自動）	紙面レイアウトに原稿を貼り込み、手作業で装飾などを調整
@<dtp>{table type=tg}既定のルールとは異なるときの指示（途中でのソフト改行や改ページなど）	原稿ソースに逐一指示	画面上で該当箇所を見ながら操作
@<dtp>{table type=tg}使用可能なフォント	OTF、TTF（ただし気軽に切り替えるものではない）	OTF、TTF、CID、Type 1（メニューから容易に変更可能）
@<dtp>{table type=tg}よく使われる図版形式	EPS、PDF、AI（PDF相当）、BMP、JPEG	EPS、PDF、AI（ネイティブ）、PSD、TIFF
@<dtp>{table type=tg}数式表現	自然に表現可能	有償プラグインの「MathType」を使用するか、画像にして貼り込んで調整
@<dtp>{table type=tg}印刷所持ち込み	印刷所から要求される標準PDF/X-1a形式にするにはAcrobatなどの有償ソフトウェアが別途必要	PDF/X-1aのほか、各種PDFを生成可能。ネイティブデータ渡しも（バージョンによるが）可能
@<dtp>{table type=tg}相互参照	タグで簡単に設定	機能はあるが扱いにくい
@<dtp>{table type=tg}索引	タグで簡単に設定。並べ替えは別途@<tt>{mendexk}などのツールを使用	機能はあるが極めて扱いにくい
@<dtp>{table type=tg}目次	自動生成	標準の機能はあるが、紙面の作り方によっては欠落など注意が必要
//}

LaTeXでは原稿ファイルにプログラムのように指示を入れて全自動で紙面を作成するのに対し、InDesignではおおむね手作業でオペレータが紙面を作り上げていくのが普通です。……と聞くと、特にエンジニア寄りの方々にとっては古臭いものに感じられるでしょうが、LaTeXの紙面レイアウトにはデザインセンスだけでなく高度なプログラミング能力が必要とされるのに対し、InDesignでは、見たとおりの直観的な操作（WYSIWYG）でデザインのセンスを直接また素早く、紙面に表現できるという大きなアドバンテージがあります@<fn>{design}。

//footnote[design][もちろん、デザインセンスは一朝一夕に身につくというものではなく、「プロっぽい紙面レイアウト」を誰でも作成できるというわけではありません。DTPを自力で行うとしても、紙面レイアウトは経験者、できれば専門のデザイナーに依頼することをお勧めします。]

InDesignに原稿を割り付けたら、原稿内の「見出し」や「強調」など、著者や編集者の指定に基づいて、紙面レイアウト時に準備しておいた装飾を割り当てていきます。そのような装飾を「スタイル」と呼びます。

特に重要なのは、段落に割り当てる「段落スタイル」（「見出し」や「本文」など）と、段落中の一部の文字列に割り当てる「文字スタイル」（「強調」「斜体」「色の変更」など）です。このほかに、表やそのセルに割り当てる「表スタイル」と「セルスタイル」、図や枠などの非文字パーツに割り当てる「オブジェクトスタイル」があります。

== IDGXMLを使ったDTP
Re:VIEWの原稿はいろいろな形式に変換できますが、なかでもRe:VIEWの開発チームが中核のターゲットとしているのは、HTML、LaTeX、そしてIDGXMLです。HTMLは@<tt>{review-epubmaker}コマンドで作成するEPUBのコンテンツとして使っていますし、LaTeXはLaTeXコンパイラによって紙面PDFを作ることができる、ということで、この2つについては皆さんにもすでにおなじみのものでしょう。

しかし、「IDGXML」とは耳慣れないキーワードです。これは何でしょうか。

実はIDGXMLはそもそも筆者の造語であり、一般的な用語というわけではないのですが、InDesignに取り込むのに適したXMLドキュメント形式です。形としては「@<tt>{<エレメント名>}〜@<tt>{</エレメント名>}」のようにタグで囲んでいく木構造からなる、おなじみのXMLの記法に準じています@<fn>{kuhuu}（@<list>{idgxmlsample}）。

//footnote[kuhuu][InDesignで実際に利用する上で筆者が実装したいくつかの特性があります。詳細については第3章で説明します。]

//list[idgxmlsample][InDesignファイルに割り付けるIDGXMLファイルの一例][xml]{
<?xml version='1.0' encoding='UTF-8'?>
<doc xmlns:aid="http://ns.adobe.com/AdobeInDesign/4.0/"><title aid:pstyle="z-章タイトル/隠し"><l@<dtp>{lb}ine aid:pstyle='z-章番号/隠し'>1
</line>Re:VIEWとInDesign</title><?dtp level="1" section="第1章　Re:VIEWとInDesign"?>
<lead><p aid:pstyle="b-扉リード">この章では、本書の始まりとして、Re:VIEWとInDesignを組み合わせることで何が実@<dtp>{lb}現されるのかを説明します。
</p><?dtp pagebreak?></lead><title aid:pstyle="H2-節見出し/位置"><h2box caption="Re:VIEWとは" no@<dtp>{lb}="1.1"/></title><?dtp level="2" section="1.1　Re:VIEWとは"?>
<p aid:pstyle="b-本文">　「はじめに」でも紹介したように、Re:VIEW（りびゅー、<a linkurl="http://reviewml.or@<dtp>{lb}g/">http://reviewml.org/</a>）は、強力かつ簡易なマークアップ記述言語およびドキュメント変換システムです。フリーソフト@<dtp>{lb}ウェアであり、誰もが目的を問わず自由に利用できます。Re:VIEWのマークアップ記述言語の記法を使って装飾したテキストファイル―@<dtp>{lb}―Re:VIEW原稿は、Re:VIEWのコマンドセットを使って、次のような各種の文書形式に変換することができます。
</p><line aid:pstyle='b-本文'>
</line><ul><li aid:pstyle="i-箇条書き">HTML、およびEPUB作成
</li><li aid:pstyle="i-箇条書き">LaTeX、およびLaTeX経由のPDF作成
 （…以下略…）
//}

さて、Re:VIEWの原稿がある、という状態からどのようにしてInDesignでIDGXMLを使ってDTPを進めていったらよいのでしょうか。手順は大まかに次のようになります。

 1. 登場する紙面要素（文、見出し、扉、図表、コードリストなど）を盛り込んだ、紙面レイアウトテンプレートを作成します。図版はAdobe IllustratorあるいはAdobe Photoshopを使って別途作成し、Re:VIEW原稿から参照するようにしておきます。
 2. Re:VIEWの原稿から変換したIDGXMLを、さらにレイアウトテンプレートに当てはめるためのXMLフィルタプログラムを作成します。場合によっては、@<tt>{review-ext.rb}などのRe:VIEW拡張も必要になります。初期のレイアウトだと処理するのに都合の悪い箇所は、紙面要素の表現を別の表現手段に置き換えなければならないこともあります。
 3. 試行錯誤の段階です。小さなテスト用のRe:VIEWの原稿からIDGXMLに変換して@<b>{2.}のフィルタを通し、紙面レイアウトテンプレートに割り付けて意図した形になっているかを確認していくのがよいでしょう。また、IDGXMLの表現だけでは実現不可能な箇所については、InDesign上で動作するJavaScriptのプログラムを作成します。
 4. レイアウトテンプレートやフィルタ、JavaScriptプログラムの準備ができたら、本番開始です。IDGXML変換、フィルタの適用、割り付け、JavaScriptのプログラムの実行、と進めて、必要ならば紙面を画面上で調整します（あるいはフィルタやJavaScriptプログラムを修正してやり直します）。
 5. 紙面ができあがったら、PDFを作成します。
 6. 以降は、納得のいくまで@<b>{2.}〜@<b>{5.}を繰り返します。繰り返しを容易にするため、@<b>{4.}での「画面上で調整」はできるだけ最小で済むようにし、また調整した内容は別途メモを残しておくのがよいでしょう。
 7. 完成したら、印刷用の場合、印刷所指定のPDF形式（通常はトンボ付きのPDF/X-1a形式）を作成し、入稿（印刷所に納品）します。

一連の手順を、@<img>{idgxmldtp}にもまとめておきます。

//image[idgxmldtp][IDGXMLによるDTPの手順]{
InDesign
紙面レイアウトテンプレート
図版（Photoshop、Illustrator）

Re:VIEW原稿
Re:VIEWのコマンドで変換
IDGXMLファイル

XMLフィルタプログラム

レイアウトに合わせたIDGXMLファイル
割り付け

JavaScriptプログラムで調整

繰り返し

PDF作成

入稿
//}

IDGXMLを使ったInDesignのDTPと、従来のすべて手作業で行うInDesignのDTPとの大きな違いは、@<b>{4.}および@<b>{6.}の段階です。@<b>{4.}では、テンプレートにIDGXMLファイルを割り付けたときにすでにほとんどのスタイル付けの済んだ状態となります。手作業の場合には、この作業は1つひとつ目視で確認しながら手動でスタイル付けしていたところでした。そして@<b>{6.}では、一度DTPの済んだ紙面を捨て、Re:VIEWの原稿から再び作っています。手作業の場合は、せっかく手間をかけてDTPを済ませたものを捨ててしまうなど、考えられないことです。

このような仕組みにすることで、InDesignのDTPファイルをマスターデータ（最新のデータ）とするのではなく、Re:VIEWの原稿をマスターデータにできます。

InDesignのDTPファイルは、InDesignというアプリケーションと、紙面のレイアウトに強く束縛されたものであり、ほかの形式――たとえばリフロー型のEPUBにするにはほぼ1から作り直しの作業が必要になることもあります。また、内容を変更するのにInDesignが必要になるため、著者や編集者とDTP担当者が別々の人間の場合、文字を直すにもいちいちDTP担当者を通さなければならなくなり、作業のボトルネックとなる上、伝達ミスや修正間違いが発生しがちです。

これに対し、Re:VIEWの原稿をマスターデータとし、InDesignのDTPデータファイルはあくまでもRe:VIEW原稿からの変換成果物という扱いにすれば、InDesignのDTPファイル（紙面）もEPUBもそれぞれ独立に最新のRe:VIEW原稿から作ることができます。著者や編集者といった文章に責任を持つ人が、DTP担当者を介さずとも直接文章に手を加え続けることができます@<fn>{honrai}。

//footnote[honrai][原稿がDTP担当者に渡された時点で、文章は入念な確認のもとに完成されていて、一切の文字修正はないというのが本来の姿です。DTP担当者が細かに配置調整して美しい紙面を作り上げたら、以降の修正はあくまでも見栄えに関することにとどまるはずです。とはいえ、特に技術書においてはそのような流れになることはまずないのですが。]

ところで、@<b>{2.}と@<b>{3.}では、フィルタプログラムやJavaScriptプログラムなどを作るための「プログラミング」が必要になります。エンジニアの方には問題のないことかもしれませんが、DTP畑の読者にとってはおそろしく思えるかもしれません。残念ながら各プログラミング言語の入門までは本書ではカバーできませんが、このあとの各章では実際にそのまま動作するコードを掲載していくので、まずはそれをコピーして使ってみるところから始めるのがよいでしょう。

逆にInDesignを使うのは初めてというエンジニアの読者にとっては、@<b>{1.}や@<b>{2.}のテンプレートの扱い、@<b>{4.}の画面上での調整、というのはよくわからないところでしょう。こちらもInDesignの操作すべてを細かに説明はできませんが、できるだけ実際の画面に即して進めていきます。

=====[column] 制作の終盤では……
リフロー型EPUBなどと異なり、紙媒体の書籍の場合には「総ページ数を16（あるいは8や4）の倍数に合わせる」「ページが変わる際に文章や要素がおかしなところで分断されないようにする」などの制約があります。

制作の終盤では、ページに収めるための各種の微調整を手作業で行うことも多くなります（これはLaTeXでもよくあることです）。このようなDTP担当者の努力に対し、Re:VIEWで書かれた原稿だからと著者や編集者が気軽に変更を入れてしまうと、ページからあふれたり、DTPの調整し直しのコストが跳ね上がったりすることになりかねません。

そのため、「今からはもう大きな修正は許容すべきでない段階」と関係者間で合意したら、以降のRe:VIEWの原稿の修正はDTP担当者が一括して行うのが適切です。

著者や編集者は直接Re:VIEW原稿の修正はせず、何らかの手段でDTP担当者に修正依頼を出します。GitHubで原稿を管理していてDTP担当者もその操作に手慣れているということであれば、ブランチを切ってPull Requestを出す、ということでも済むかもしれません。ただ、制作の終盤では「紙面上でどのように変わるか」が重要なので、修正指示を書き込んだ印刷紙（いわゆる「赤字ゲラ」）や、Acrobatを使って指示のコメントを入れたPDFで渡すほうが、安全で確実です。

その修正内容を鑑みてDTPをやり直すかどうかをDTP担当者が判断し、やり直すほどではないと決断したなら、InDesignのDTPファイルを直接修正します。Re:VIEWだからといって、何もすべてDTPをやり直す必要はありません。InDesignの良さは、画面上での手直しが容易なことにあります。そのメリットを最大限活かしましょう。もちろん、直接修正した内容は、マスターデータのRe:VIEW原稿ファイルにも反映しておく必要があります。

=====[/column]

== InDesign＋IDGXMLの制約
InDesignはプロフェッショナル向けと述べましたが、実際にIDGXMLと組み合わせてDTPを始めようとすると、こんなことも簡単にできないのか……と驚くことになるかもしれません（もともと用途が違うといってしまえばそれまでなのですが）。たとえば次に挙げるような事柄は、最初に知っておいたほうがよいでしょう。

 * 全自動ではない
 * フローティングな紙面には不向き
 * そもそもXMLの処理は不得手

=== 全自動ではない
Re:VIEWの原稿からEPUBあるいはLaTeXを利用したPDF生成はコマンド1つでできるため、GitやSubversionのようなバージョン管理システムと、コミットに基づいてビルドを行うCI（Continuous Integration）サーバーを連携させて常に最新の結果を出力できるようにしている、というエンジニアの方も多いことでしょう。

しかし、IDGXMLとInDesignを使ったDTPにおいては、紙面の細かな調整に人間の恣意的な判断と操作を要することから、完全な無人・自動での生成はできません。コミットのたびに紙面を作成するというのはコストに見合わないので、ごく一般的な書籍制作と同じく、原稿がおおむね固まったタイミングの単位（たとえば初校・再校・3校）ごとの作業に抑えられることになります。

#@# 逆にメリットとしては、何かちょっとした特別な調整あるいは修正をごく少数だけ施したいというときに、わざわざ処理タグや処理プログラムを作ったりする必要がなく手で済ませられること、IDGXMLでのDTP手法が許容されなくなったとしてもInDesignファイルを既存の手動のやり方で引き継ぐことができることが挙げられます。

=== フローティングな紙面には不向き
図表を紙面の上あるいは下に合わせて本文のほうは適当に折り返す、紙面の空きに応じて2つの図を左右に並べる、といったことは人間の目からすればあたかも容易なことに見えます。しかし、IDGXMLと機械処理でDTPを行おうとすると、これは予想外に難しいことです。

//image[floating][フローティングな紙面はInDesignの自動DTPでは困難]{
//}

紙面の上や下に合わせるためには、本文のコンテンツを配置→本文の指定からなるべく離れていないところに図表を配置→配置したことでその分量の本文を追い出し→……という配置試行の繰り返しが必要です（LaTeXは内部処理でこの計算を行っています）。

InDesign上のJavaScriptプログラムでこの自動判断をするのは困難です。また、IDGXMLのコンテンツをInDesignに配置してからJavaScriptのプログラムで判断して要素の移動などの処理をさせようとしても、今度はInDesignがひどく不安定になり、すぐにクラッシュしたりします。

そのため、フローティングな紙面要素は極力排し、どうしても必要なときには仮の位置に置く程度にして、調整はDTP作業者の手動に委ねる、といった対策をとる必要があります。

フローティング紙面要素を多数含まなければならない紙面レイアウトでは、IDGXMLよりも、LaTeXを利用する、あるいはRe:VIEW原稿で管理し続けることはあきらめて完全に手動でInDesignでのDTPを行う、などの手段をとったほうが賢明です。

=== そもそもXMLの処理は不得手
残念ながら、InDesignが提供するXML処理機能は満足のいくものではありません。

XMLファイルは1つしか読み込めませんし、ドキュメントの木構造からの探索はコンテンツが大きくなるほど乗数的に遅くなります。

XMLドキュメントの木構造は、実質、読み込み専用です。InDesignの画面上に見えているテキスト部分以外のXMLノードの追加や削除をInDesignで行うと、不特定のクラッシュが頻繁に起こり、下手をするとそのドキュメントファイルを二度と開けないほどに壊してしまいます。

そして、InDesignのJavaScriptで提供されるXML操作の命令は乏しく、XMLノードやその構造から望みの情報を得るには、InDesign内部のコンテンツ管理手法にまで踏み込む必要があります（筆者の作成したJavaScriptプログラムはその助けとなります）。

==[nonum] この章のまとめ
 * InDesignは、WYSIWYGで操作できる、プロフェッショナル向けのDTPソフトウェアです。段落や文字列などに対して紙面レイアウトの「スタイル」を適用することで原稿を装飾します。
 * IDGXMLは、Re:VIEW原稿から変換してできる、InDesign向けのXMLファイルです。
 * InDesignはXMLのインポートやJavaScriptの実行をサポートしており、IDGXMLとプログラムを使ってRe:VIEW原稿からDTPを繰り返し行うことができます。
 * InDesignやIDGXMLがどのような用途にも使えるというわけではありません。目的のために妥当な手法かどうか、検討する必要があります。

=====[column] InDesignにインポート可能なファイル
余談ながら、InDesignはIDGXML以外にも、ドキュメントコンテンツとしていくつかのファイル形式のインポートができます。@<table>{format}にそれらをまとめておきます。

//tsize[28,103.9]
//table[format][InDesignにインポートできる主なファイル形式]{
ファイル形式	説明
--------------------------------------------
@<dtp>{table type=tg}テキストファイル	テキストファイルは最もポピュラーな形式であり、（文字エンコーディングと使用可能文字範囲を除けば）どのテキストエディタでも利用できる。InDesignにテキストファイルをインポートしたあとは、手作業で段落、文字列などにスタイルを付けていくことになる。ちなみに、Re:VIEWでテキスト形式への変換（@<tt>{review-compile --target=text}）を行うと、見出しに「@<tt>{■H1■}」のような文字列が付くが、これは擬似的なタグの一種で、検索置換機能を使ってスタイル付けを半自動化し、作業を軽減することがよく行われる
@<dtp>{table type=tg}InDesignタグ付きテキストファイル	昔からInDesignが対応していた形式で、終了タグのないXMLドキュメントに似た見た目になっている。かつては信頼性の低いものだった（エクスポートしたものを再度インポートするとエラーになるなど）が、現在ではInDesignのコンテンツ表現を細かに指定することができ、うまく使えば紙面制作の労力を大幅に軽減できる。ただし、XMLのような構造情報は持たないために範囲に対して操作する（コラムの範囲を罫線で囲むなど）のが難しい、オブジェクトスタイルは指示できない、といった観点から筆者は採用していない
@<dtp>{table type=tg}XMLファイル	本書でターゲットとする形式。一般のXMLファイルに対しての注意事項は本文を参照。構造情報あるいはタグの属性を使って紙面からは隠された固有の情報を入れておくことができ、これをあとからJavaScriptプログラムで処理できる（詳細はこのあとの各章で説明していく）
@<dtp>{table type=tg}IDMLファイル	InDesignのネイティブファイル表現をXMLで表したもので、後方互換性のために用意されている。使いこなせばプログラムで紙面を完全に自動で生成できるが、レイアウトや登場要素が固定で配置の計算が容易という対象（たとえば定型度の高いカタログなど）でなければ開発コストを回収できない可能性が高い
@<dtp>{table type=tg}Microsoft Wordファイル（Wordファイル）あるいはRTF	Wordのスタイルを「@<ruby>{齟齬, そご}なく」適用している文書であれば、そのスタイルを段落スタイルなどに利用できる。また、図版についてはWordファイルに埋め込まれたものは商業印刷の出力には不適であることが多く、結局ほかの形式と同様にAdobe Illustratorで清書したり、Adobe Photoshopで色変換や解像度調整をしたりする必要がある。囲みや装飾を施したリッチなWordファイルは、InDesign上では崩れたり、文字が抜けたりすることに注意が必要
//}

=====[/column]
